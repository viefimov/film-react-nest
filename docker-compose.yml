version: '3.8'

services:
  # Сервис сборки фронтенда: собирает проект и копирует собранный код в volume
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ghcr.io/viefimov/film-react-nest-frontend:latest
    volumes:
      - frontend_build:/app/dist
    # Команда для сборки и копирования собранных файлов в volume
    command: ["sh", "-c", "npm run build && cp -r dist/* /app/dist"]

  # Бэкенд. Обратите внимание, что запускается продакшен-версия из папки dist.
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ghcr.io/viefimov/film-react-nest-backend:latest
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - app-network

  # Nginx-сервер для раздачи фронтенда и проксирования запросов к бэкенду
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: ghcr.io/viefimov/film-react-nest-nginx:latest
    ports:
      - "80:80"
    volumes:
      - frontend_build:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - app-network

  # PostgreSQL база данных
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  # pgAdmin для управления базой данных
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  frontend_build:
  pgdata:
  pgadmin_data:

networks:
  app-network:
    name: mynetwork
